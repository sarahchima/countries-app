{"version":3,"sources":["Components/CountryCard/CountryCard-view.jsx","Components/CountryCard/CountryCard-container.js","Components/HomePage/HomePage-view.js","Components/HomePage/SearchField.jsx","Components/HomePage/Dropdown.jsx","Components/HomePage/HomePage-container.jsx","Components/CountryPage/CountryPage-view.jsx","Components/CountryPage/CountryPage-container.jsx","Components/Navbar/Toggle.jsx","Components/Navbar/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["CountryCardView","props","name","population","region","capital","flag","countryData","handleCountryClick","react_default","a","createElement","className","onClick","style","backgroundImage","concat","CountryCard","CountryCard_view","HomePageView","console","log","countriesData","length","map","CountryCard_container","key","SearchField","handleSearchFilter","role","aria-label","placeholder","onChange","e","value","target","DropDown","react_select_browser_esm","options","label","selectedOption","HomePage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","allCountriesData","bind","assertThisInitialized","_this2","fetch","then","response","json","data","setState","updateCountriesData","catch","error","searchText","type","regex","RegExp","filter","country","match","HomePage_SearchField","Dropdown","HomePage_view","React","Component","CountryPageView","_props$countryData","nativeName","subregion","topLevelDomain","extractNamesFromArray","getBorderCountriesNames","currencies","languages","borderCountriesMap","borders","alt","src","CountryPage","array","withComma","arguments","undefined","item","borderCountriesCodes","borderCountries","includes","alpha3Code","handleBackButtonClick","CountryPage_view","Toggle","updateDarkMode","isDarkMode","Navbar","Navbar_Toggle","App","isCountryPage","countryPageData","_this$state","Components_Navbar_Navbar","HomePage_container","CountryPage_container","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7fd02fe4.chunk.js","sourcesContent":["import React from 'react';\nimport './CountryCard.css';\n\nfunction CountryCardView(props) {\n    const { countryData, handleCountryClick } = props;\n\n    const handleClick = (data) => {\n        handleCountryClick(data)\n    }\n\n    let name,\n        population,\n        region,\n        capital,\n        flag;\n\n    if (countryData) {\n        ({ name, population, region, capital, flag } = countryData);\n    }\n    return (\n        <div className=\"country-card\" onClick={() => handleClick(countryData)}>\n            <picture className=\"country-card-picture\" style={{ backgroundImage: `url(${flag})`}}>\n                {/* <img alt=\"country\" src={`${flag}`}/> */}\n            </picture>\n            <div className=\"country-card-info\">\n                <h3 className=\"country-card-info-name\">{name}</h3>\n                <p className=\"country-card-info-population\"><b>Population</b>: {population} </p>\n                <p className=\"country-card-info-region\"><b>Region</b>: {region}</p>\n                <p className=\"country-card-info-capital\"><b>Capital</b>: {capital} </p>\n            </div>\n        </div>\n    )\n}\n\n\nexport default CountryCardView;","import React from 'react';\nimport CountryCardView from './CountryCard-view'\n\nconst CountryCard = (props) => {\n    const { countryData, handleCountryClick } = props;\n    return (\n        <CountryCardView countryData={countryData} handleCountryClick={handleCountryClick}/>\n    )\n}\n\nexport default CountryCard;","import React from 'react';\nimport { CountryCard } from './../CountryCard'\nimport './HomePage.css'\n\nconst HomePageView = (props) => {\n\n    console.log(props)\n    const { countriesData, handleCountryClick} = props;\n    if( countriesData && countriesData.length !== 0) {\n        return (\n            <div className=\"home-page-main\">\n                <div className=\"country-card-container\">\n                    { countriesData.map ((countryData) => {\n                        return (\n                            <CountryCard key={countryData.name} countryData={countryData} handleCountryClick={handleCountryClick} />\n                            )\n                        } \n                    )}\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"home-page-main\"> There are no countries</div>\n        )\n    }\n\n}\n\nexport default HomePageView;","import React from 'react';\n\nfunction SearchField (props) {\n    const { handleSearchFilter } = props;\n\n    function handleChange(e) {\n        const value = e.target.value;\n        handleSearchFilter(value, \"searchFilter\")\n    }\n    return (\n        <div className=\"search-field\">\n            <span role=\"img\" aria-label=\"search-icon\">🔍</span>\n            <input placeholder=\"Search for a country\" onChange={handleChange} />    \n        </div>\n    )\n}\n\nexport default SearchField;","import React from 'react';\nimport Select from \"react-select\";\n\nfunction DropDown(props) {\n    const options = [\n        {\n            value: \"africa\",\n            label: \"Africa\"\n        },\n        {\n            value: \"Asia\",\n            label: \"Asia\"\n        },\n        {\n            value: \"America\",\n            label: \"America\"\n        },\n        {\n            value: \"Europe\",\n            label: \"Europe\"\n        },\n        {\n            value: \"Oceania\",\n            label: \"Oceania\"\n        },\n\n    ]\n\n    function handleChange(selectedOption) {\n        props.handleSearchFilter(selectedOption.value)\n    }\n        \n    return (\n        <div className=\"dropdown-container\">\n            <Select className=\"dropdown\" options={options} onChange={handleChange} placeholder=\"Filter by Region\"  />\n        </div>\n    )\n}\n\nexport default DropDown","import React from 'react'\nimport HomePageView from './HomePage-view';\nimport SearchField from './SearchField';\nimport DropDown from './Dropdown';\n\nclass HomePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            allCountriesData: [],\n            countriesData: []\n        }\n        this.handleSearchFilter = this.handleSearchFilter.bind(this)\n    }\n\n    componentDidMount() {\n        const countriesUrl = \"https://restcountries.eu/rest/v2/all\";\n        fetch(countriesUrl) \n            .then((response) => response.json())\n            .then ((data) => {\n                this.setState({\n                    allCountriesData: data,\n                    countriesData: data\n                })\n\n                this.props.updateCountriesData(data)\n            })\n            .catch(function(error) {\n\n            }) \n        \n    }\n\n    handleSearchFilter(searchText, type) {\n        const regex = new RegExp(searchText, 'gi');\n        const allCountriesData = this.state.allCountriesData;\n        const countriesData = allCountriesData.filter(country => {\n            if (type === \"searchFilter\") {\n                return country.name.match(regex)\n            } else {\n                return country.region.match(regex)\n            }\n        })\n\n        this.setState({\n            countriesData: countriesData\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"filter-container\">\n                    <SearchField handleSearchFilter={this.handleSearchFilter}/>\n                    <DropDown handleSearchFilter={this.handleSearchFilter}/>\n                </div>\n                <HomePageView countriesData={this.state.countriesData} handleCountryClick={this.props.handleCountryClick} />\n            </div>\n        )\n    }\n}\n\nexport default HomePage;","import React from 'react';\n\nfunction CountryPageView(props) {\n    const { countryData: { flag,\n                name,\n                nativeName,\n                population,\n                region,\n                subregion,\n                capital,\n                topLevelDomain,\n            },\n            extractNamesFromArray, \n            getBorderCountriesNames\n        } = props;\n\n    const currencies = extractNamesFromArray(props.countryData.currencies, true)\n    const languages = extractNamesFromArray(props.countryData.languages, true)\n    const borderCountries = getBorderCountriesNames(props.countryData.borders)\n\n    const borderCountriesMap =  borderCountries.map(country => \n         <span className=\"border-country\">{country}</span>\n    )\n\n    console.log(borderCountriesMap)\n\n    return (\n        <div className=\"container\">\n            <picture className=\"country-image\">\n                <img alt=\"\" src={flag}/>\n            </picture>\n            <div className=\"country-details\">\n                <h1>{name}</h1>\n                <div className=\"\">\n                    <div className=\"country-info\">\n                        <p><b>Native Name: </b>{nativeName}</p>\n                        <p><b>Population: </b>{population}</p>\n                        <p><b>Region: </b>{region}</p>\n                        <p><b>Sub Region: </b>{subregion}</p>\n                        <p><b>Capital: </b>{capital}</p>\n                    </div>\n                    <div className=\"country-info\">\n                        <p><b>Top Level Domain: </b>{topLevelDomain}</p>\n                        <p><b>Currencies: </b>{currencies} </p>\n                        <p><b>Languages: </b> {languages} </p>\n                    </div>\n                </div>\n                <div className=\"border-countries\">\n                    <p><b>Border Countries: </b></p>\n                    <div>{ borderCountriesMap}</div>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default CountryPageView;","import React, { Component } from 'react';\nimport CountryPageView from './CountryPage-view';\nimport './CountryPage.css'\n\nclass CountryPage extends Component {\n    constructor(props) {\n        super(props);\n        this.extractNamesFromArray = this.extractNamesFromArray.bind(this)\n        this.getBorderCountriesNames = this.getBorderCountriesNames.bind(this);\n    }\n\n\n    extractNamesFromArray(array, withComma = false) {\n        return array.map(item => {\n            if (withComma && item !== array[array.length - 1]) {\n                return `${item.name}, `\n            }\n            return `${item.name}`\n        })\n    }\n\n    getBorderCountriesNames(borderCountriesCodes) {\n        const countriesData = this.props.countriesData;\n        const borderCountries = countriesData.filter( country => \n           borderCountriesCodes.includes(country.alpha3Code)\n        )\n        return this.extractNamesFromArray(borderCountries)\n    }\n\n    render() {\n\n        const { handleBackButtonClick } = this.props;\n        return(\n            <div>\n                <div className=\"back-button-container\">\n                    <button onClick={handleBackButtonClick} className=\"back-button\">← Back</button>\n                </div>\n                <CountryPageView\n                 countryData={this.props.countryData}\n                 extractNamesFromArray={this.extractNamesFromArray}\n                 getBorderCountriesNames={this.getBorderCountriesNames}\n                />\n\n            </div>\n\n        )\n    }\n}\n\nexport default CountryPage;","import React from 'react';\nimport \"./Navbar\";\n\nfunction Toggle (props) {\n\n    const handleToggle = () => {\n        props.updateDarkMode();\n    }\n    return (\n        <button className=\"toggle\" onClick={handleToggle}>\n            <span>☾</span>{props.isDarkMode ? \"Light Mode\" : \"Dark Mode\"}\n        </button>\n    )\n}\n\nexport default Toggle;\n","import React from 'react';\nimport Toggle from './Toggle';\nimport './Navbar.css';\n\nconst Navbar = (props) => {\n    return (\n        <div className=\"navbar-container\">\n            <nav className=\"navbar\">\n                <h1 className=\"navbar-header\">Where in the world?</h1>\n                <div>\n                    <Toggle updateDarkMode={props.updateDarkMode} isDarkMode={props.isDarkMode} />\n                </div>\n            </nav>\n        </div>\n    )\n}\n\nexport default Navbar","import React, { Component } from 'react';\nimport './App.css';\nimport { HomePage } from './Components/HomePage';\nimport { CountryPage } from './Components/CountryPage';\nimport { Navbar } from './Components/Navbar';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisCountryPage: false,\n\t\t\tcountryPageData: [],\n\t\t\tcountriesData: [],\n\t\t\tisDarkMode: false\n\t\t}\n\n\t\tthis.handleCountryClick = this.handleCountryClick.bind(this);\n\t\tthis.updateCountriesData = this.updateCountriesData.bind(this);\n\t\tthis.handleBackButtonClick = this.handleBackButtonClick.bind(this);\n\t\tthis.updateDarkMode = this.updateDarkMode.bind(this);\n\t}\n\n\thandleCountryClick(countryData) {\n\t\tthis.setState({\n\t\t\tisCountryPage: true,\n\t\t\tcountryPageData: countryData\n\t\t})\n\t}\n\n\thandleBackButtonClick() {\n\t\tthis.setState({\n\t\t\tisCountryPage: false\n\t\t})\n\t}\n\n\tupdateCountriesData(countriesData) {\n\t\tthis.setState({\n\t\t\tcountriesData: countriesData\n\t\t})\n\t}\n\n\tupdateDarkMode() {\n\t\tthis.setState({\n\t\t\tisDarkMode: !this.state.isDarkMode\n\t\t})\n\t}\n\n\n  \trender() {\n\t\tconst { isCountryPage, countryPageData, countriesData, isDarkMode } = this.state;\n\t\treturn (\n\t\t\t<div className={`body ${isDarkMode ? \"dark-mode\": \"\"}` }>\n\t\t\t\t<Navbar updateDarkMode={this.updateDarkMode} isDarkMode={isDarkMode}/>\n\t\t\t\t{ !isCountryPage && <HomePage handleCountryClick={this.handleCountryClick} updateCountriesData={this.updateCountriesData}/> }\n\t\t\t\t{ isCountryPage && <CountryPage countryData={countryPageData} countriesData={countriesData} handleBackButtonClick={this.handleBackButtonClick} />}\n\t\t\t</div>\n\t\t)\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}